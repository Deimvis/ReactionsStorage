#!/usr/bin/env python3
import argparse
import os
import logging
import yaml
import sys


if os.getenv('DEBUG').lower() in ['1', 'true']:
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
        datefmt="%d/%b/%Y %H:%M:%S",
    )
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('yt').setLevel(logging.WARNING)
else:
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s [%(name)s] %(message)s',
        datefmt="%d/%b/%Y %H:%M:%S",
    )


def parse_args():
    parser = argparse.ArgumentParser(description='Patch docker-compose file')
    parser.add_argument('--set-platform', choices=['linux/x86_64'], help='Set platform for each service to given')
    parser.add_argument('--unset-build', action='store_true', help='Remove "build" field for each service')
    parser.add_argument('--unset-depends-on', action='store_true', help='Remove "depends_on" field for each service')
    return parser.parse_args()


def main():
    args = parse_args()
    data = yaml.safe_load(sys.stdin)
    for service in data['services']:
        if args.set_platform is not None:
            data['services'][service]['platform'] = args.set_platform
        if args.unset_build:
            data['services'][service].pop('build', None)
        if args.unset_depends_on:
            data['services'][service].pop('depends_on', None)
    logging.debug('Resulting docker-compose:\n{}'.format(yaml.dump(data, indent=2, sort_keys=False)))
    yaml.dump(data, sys.stdout, indent=2, sort_keys=False)


if __name__ == '__main__':
    main()
